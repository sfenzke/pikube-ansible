---

############################
#       Create Users       #
############################
- name: make sure users are present
  user:
    name: "{{ item.name }}"
    state: present
  loop: "{{ host_os.users }}"

- name: make sure ssh keys are present
  authorized_key:
    user: "{{ item.name }}"
    state: present
    key: "{{ item.ssh_public_key }}"
  loop: "{{ host_os.users }}"

############################
#       Prerequisites      #
############################
#mak sure the required modules are loaded
- name: make sure the required modules are loaded
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - br_netfilter
    - overlay
  become: true

- name: make sure modules become loaded after reboot
  copy:
    src: "{{ item }}"
    dest: /etc/modules-load.d/
    owner: root
    group: root
    mode: 0644
  become: true
  register: modules_loaded
  loop:
    - containerd.conf
    - kubernetes.conf

- name: make sure the bridge kernel setting is present
  copy:
    src: k8s.conf
    dest: /etc/sysctl.d/
    owner: root
    group: root
    mode: 0644
  become: true
  notify: reload kernel parameters

#enable cgroups memory because it is disabled by default on raspberry OS 
- name: make sure cgroups memory is enabled
  template:
    src: cmdline.txt.j2
    dest: /boot/cmdline.txt
  register: cgroups_memory_enabled
  become: true

#disable swap because this is required by kubernetes 
- name: make sure swap is disabled
  block:
    - name: "make sure the swapfile is disabled"
      command: "dphys-swapfile swapoff"
      when: ansible_facts['memory_mb']['swap']['total'] > 0
      register: swap_disabled
    - name: "make sure the dphys-swapfile service is disabled"
      systemd:
        name: "dphys-swapfile"
        enabled: no
        state: "stopped"
  become: true

#configure the firewall
- name: make sure firewall is configured
  block:
    - name: make sure firewalld is installed
      apt:
        name: firewalld
        state: absent
    # - name: make sure firewalld is running and is enabled
    #   systemd:
    #     name: firewalld
    #     state: started
    #     enabled: true
    # - name: configure masters firewall
    #   firewalld:
    #     port: "{{ item }}" 
    #     permanent: true
    #     state: enabled
    #   loop:
    #     - '6443/tcp'
    #     - '8472/udp'
    #     - '10250/tcp'
    #   notify: reload firewalld
  become: true

- name: reboot the machine to apply the settings set earlier
  reboot:
  become: true
  when: modules_loaded.changed or cgroups_memory_enabled.changed or swap_disabled.changed